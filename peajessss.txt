let map;
let directionsService;
let directionsRenderer;

function initMap() {
  map = new google.maps.Map(document.getElementById("map"), {
    center: { lat: -34.397, lng: 150.644 },
    zoom: 8,
    mapTypeControl: true,
    streetViewControl: true,
    fullscreenControl: true
  });

  directionsService = new google.maps.DirectionsService();
  directionsRenderer = new google.maps.DirectionsRenderer();
  directionsRenderer.setMap(map);

  // Autocompletado
  const startInput = document.getElementById("start");
  const endInput = document.getElementById("end");
  new google.maps.places.Autocomplete(startInput);
  new google.maps.places.Autocomplete(endInput);

  // Geolocalización
  if (navigator.geolocation) {
    navigator.geolocation.getCurrentPosition(position => {
      const pos = {
        lat: position.coords.latitude,
        lng: position.coords.longitude
      };
      map.setCenter(pos);
    }, () => {
      handleLocationError(true, map.getCenter());
    });
  } else {
    // Navegador no soporta geolocalización
    handleLocationError(false, map.getCenter());
  }
}

async function calculateRoute() {
  const start = document.getElementById("start").value;
  const end = document.getElementById("end").value;

  // Geocodificar las direcciones para obtener las coordenadas
  const geocoder = new google.maps.Geocoder();

  try {
    const originResponse = await geocoder.geocode({ address: start });
    const destinationResponse = await geocoder.geocode({ address: end });

    if (originResponse.results.length > 0 && destinationResponse.results.length > 0) {
      const origin = originResponse.results[0].geometry.location;
      const destination = destinationResponse.results[0].geometry.location;

      // Obtener datos de rutas y peajes usando DirectionsService
      const directionsRequest = {
        origin: origin,
        destination: destination,
        travelMode: google.maps.TravelMode.DRIVING
      };

      directionsService.route(directionsRequest, (result, status) => {
        if (status === google.maps.DirectionsStatus.OK) {
          directionsRenderer.setDirections(result);

          // Obtener distancia y duración de las rutas
          const route = result.routes[0];
          const leg = route.legs[0];
          const distance = leg.distance ? leg.distance.text : 'No disponible';
          const duration = leg.duration ? leg.duration.text : 'No disponible';

          // Obtener peajes de la API de Routes
          fetchTollInfo(origin, destination, distance, duration);
        } else {
          alert('No se pudo calcular la ruta: ' + status);
        }
      });

    } else {
      alert("No se pudieron geocodificar las direcciones.");
    }
  } catch (error) {
    alert("No se pudo calcular la ruta: " + error.message);
  }
}

async function fetchTollInfo(origin, destination, distance, duration) {
  try {
    const response = await fetch('https://routes.googleapis.com/directions/v2:computeRoutes', {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
        'X-Goog-Api-Key': 'AIzaSyBTkG8LoFhhx3RnSHg04j22GgL2-sYNwq0',
        'X-Goog-FieldMask': 'routes.legs.travelAdvisory.tollInfo'
      },
      body: JSON.stringify({
        origin: {
          location: {
            latLng: {
              latitude: origin.lat(),
              longitude: origin.lng()
            }
          }
        },
        destination: {
          location: {
            latLng: {
              latitude: destination.lat(),
              longitude: destination.lng()
            }
          }
        },
        travelMode: "DRIVE",
        extraComputations: ["TOLLS"],
        routeModifiers: {
          vehicleInfo: {
            emissionType: "GASOLINE"
          },
          tollPasses: ["US_CA_Fastrak"] // Ajusta según los pases de peaje que tienes
        }
      })
    });

    const data = await response.json();

    if (response.ok && data.routes && data.routes.length > 0) {
      let output = '';

      data.routes.forEach((route, index) => {
        const leg = route.legs[0];
        const tollInfo = leg.travelAdvisory?.tollInfo;
        const tolls = tollInfo ? formatTollInfo(tollInfo) : 'No disponible';

        output += `
          <div class="card">
            <p><strong>Ruta ${index + 1}:</strong></p>
            <p><strong>Distancia:</strong> ${distance}</p>
            <p><strong>Duración:</strong> ${duration}</p>
            <p><strong>Peajes:</strong> ${tolls}</p>
            <button onclick="selectRoute(${index})">Seleccionar Ruta</button>
          </div>
        `;
      });

      document.getElementById('output').innerHTML = output;

      window.selectRoute = function(index) {
        directionsRenderer.setDirections({ routes: [data.routes[index]] });
      };
    } else {
      alert("No se pudo calcular la ruta: " + (data.error?.message || 'No se encontraron rutas.'));
    }
  } catch (error) {
    alert("No se pudo calcular la ruta: " + error.message);
  }
}

function handleLocationError(browserHasGeolocation, pos) {
  const infoWindow = new google.maps.InfoWindow;
  infoWindow.setPosition(pos);
  infoWindow.setContent(browserHasGeolocation ?
    'Error: El servicio de geolocalización falló.' :
    'Error: Tu navegador no soporta geolocalización.');
  infoWindow.open(map);
}

function formatTollInfo(tollInfo) {
  return tollInfo.estimatedPrice.map(price => `${price.currencyCode} ${price.units}.${Math.floor(price.nanos / 1e7)}`).join(', ');
}
